{"noir_version":"0.32.0+92ff2fa2e944722e5c3fa43fb3363f093b8f1d12","name":"AuthRegistry","functions":[{"name":"set_authorized","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"},{"name":"authorize","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/+2dWW/bRhSFSVlSYiuWE1srJdtavES2WtOW4/SlRfsL+pCHPhVoYKtFgbYpjKC/vx6KNzq5HapDZIbkBTiAIC7De745M7xcrIF9b1W2nj5+vFyLv6vefwvV+T7+Dr+sXFuMFbrk9IVwVoRwbrng9GHQVhm8MmbL21CohX9UVt/P2b6qLeJvwts6CPCzTMn78b5P39iIeNsW29eI9yN8AxrtwzbSrMA2Ousp7rOnz0687ZU6Bg2J9+3Fy+//+fPHv+8/PCzfLf96WD76UK1O8t7moqJvQ11rdofhTSNuDhbOg92wDUzP3TBdO2xvqGLvQHts+UjDDD17xjxrQp0d8LHhyEcftImJ1lEzDXe9INyux8gLN7FvVFrYAY9fMK+xfbvggSX9EPuwBnq7oLsHbbd5cVexmtCnPrDsgf6+E+8X96qtL73Py6Zctw9Mr5wwrXKdm/auxvEBxLZ3A/RmoeK1mG8vmW9NqHMAXrYceemDNjHReitB354nb29VvLaBJ20NUzsHT9oJ+vY8uftVxesYeNLRMHVy8KSToG9xnET3Cl0DT7oapm4OnnQT9C2Ok0i/Z+BJT8PUy8GTXoK+RU/eqnh9A0/6GqZ+Dp70E/QtevJGxQsMPAk0TEEOngQJ+vY8uYnuqwYGngw0TIMcPBkk6FvMsdH9ydDAk6GGaZiDJ8MEfYvnzr2Kd2jgyaGG6TAHT1AzDXdbKHdLKHdQEG6ub+/cWUQ59sjAkyMN01EOnqBmGu6gINxc32IeXKp4xwaeHGuYjnPwBDXTcLeFcreEcgdCubtCuYcld6bcRcknXN/ic0P0zD0y8GSkYRrl4AlqjlJw9wvCzfUtXuej97FjA0/GGqZxDp6ME/QtviuI7n0mBp5MNEyTHDxBzTTcgVDuA6HcLaHcbaHcHaHcXaHcPaHcfaHcUvP3QCj3UCi31Pwt9XopdXwXJZ9w/Yo1/bsHFW9q4MlUwzTNwZNpgr7F5/no78UnBp6caJhOcvAENdNwD4Ryt4RyB0K5y3GSLXdXKHdHKHeZT76Mm+tbvD+5U/FODTw51TCd5uAJaqbh7gjlbgvlngjlDgrCzfUt/m4m0j8z8ORMw3SWgyeomYZ7XBDuqreeY/OD75pp8dBgTKThMU6PcTZgeR+8O4cYNWucYYh9dQ56r534EmrHPa2/dq6/uFexLxy1TcW+dBM7+p3dPI5Vi2Nfanz7CvR9y/02Z7FJaw59Scvf+eu6VI/qUL4gfjXHbhYvIz8/7owd14Q6Mzjukh1H69Tvyr9byAGuxprJWFde0Hn+rbdmOnfCtJrXXPc+L5vyEuaEphuma4ftDXV9UGdtwxyI80xdXq/OGROtb7rObuKuFoTbof6nOcJ1prnNfFGF+rEG23cZF7XBh/o433bmpB2r+bZp7g1mwOTquuyuvatz8IK1bZ+1rQl18Lcerq7VPmgTE62jZhrullDutlDujlDurlDunlDuvlDuQCj3QCj3UCi31Pwt9Xop9bw8FMot1e8jodxlPsmWW+r4lnofK/U6X96fZMt9LJRb6vPOSCj3WCi31OtO+X4wW+7y/WC23OX7wWy5y/eD2XKX7wez5S6f57Plljq+peaTiVDuqVBuqeO7fD+YLXc5TrLllvrcIPU5rcwn2XKfCOWWOr6lPjdIvR+Uel6eCuUeF4S7Gn9U+aXimmk1NwmZSMNjnB7jbMDyDLzDOS+25yaR3iXozZ34suorPn5ofe5cfzU36WtHbVOxr9zEjn7fHcaxaG7Slca3a9D3LfdbyGKTVgh9Scs/V9Z1qR7VoXxB/GrOAM0xQn5+3AU7rgl1cE7TFTuO1qnflX/vIAe4GmsmY13NTaLznOYmKTScW0GF5wGbY7fBtEjDY/xUMFdUHTG5nuvH+6bG2oa5EecsubyO/d+8uh1vfc+4/veeHz88vv9t+dPj7x+XHisVWOYTXGmZ16PtvmabKttPn38BQhAXqKJ4AAA=","debug_symbols":"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"},{"name":"set_reject_all","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"reject","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/+2bXU/bMBSGk67lq1BWmqRNy0dbKDDYRWgG7AaJHzBpF7vYNWq7aRcbE0L7/auDvZ6dOZMjjnGOVEtVnMQ57+M3zknS1r73VCrzjy/rNbl85f1bVJtbuUyeVy4IYyU2OX0mnBUbnAKyqhkUvhw4uUX17oOsrKF9VSra90m6AgTwyM1Gt9z3Zwk6UJHbKmhf3QMdlPvqIL4PtimDVIzV+WddbmuKY2Dn52Vj/tmW9btf3z/+nNxPZ59mP6azBx80qwG7/lfWvIW9pNYmyVh0bwXpYZ4qYlHLVTtMFxb7m4i466A/VMyCcwN5toI8a4A262DfhiUffe/vy7IK1qFmEe5aSbhtj5G6ndjjbdkH5XEd9Af3bxN4QKSfwHNYA3qbQLcB+k55cxSxtsA59QFLA+g3rXifToTXKi17QAMWmOuagOm1FaanXGenv0/jeAfEpnuAuExFvBbybRv51gBtdoCXLUte+kBbMan1Vo4+nSfX70S8wMCTQMMUOPAkyNGn8+Tqi4gXGngSaphCB56EOfqE42Qs4kUGnkQapsiBJ1GOPuE4yfTbBp60NUxtB560c/QJPbkW8ToGnnQ0TB0HnnRy9Ak9uRTxYgNPYg1T7MCTOEefzpNx9lzVNfCkq2HqOvCkm6NPmGOz55OegSc9DVPPgSe9HH3Ca2ci4u0aeLKrYdp14AnULMIdMOVuMeWOS8KN9emunTTLsXsGnuxpmPYceAI1i3DHJeHG+oR5cCbi7Rt4sq9h2nfgCdQswh0w5W4x5Y6ZckdMuXtL7hflLks+wfqE7w3ZO/eBgScHGqYDB55AzSLcnZJwY33C+3z2fWzfwJO+hqnvwJN+jj7hdwXZs8/AwJOBhmngwBOoWYQ7Zsq9w5S7xZQ7YModMuWOmHK3mXJ3mHJzzd9dptw9ptxc8zfX+yXX8V2WfIL1Cd93piLe0MCToYZp6MCTYY4+4ft89nvxoYEnhxqmQweeQM0i3F2m3C2m3DFT7uU4eVnuiCl3yJR7mU+ex431CZ9PrkS8IwNPjjRMRw48gZpFuEOm3AFT7gFT7rgk3Fif8H8zmf7IwJORhmnkwBOoWYS7XxJusU3Nsbn1bTOl0zpiUhoe4vQQZx3Um8C7YxCjRsaZJPBcHQO9Eyu+JNpxr9ZPrOunExH7jaW+idhndmJn/7M7l7FqMvaZxre3QN8nPm/nKLbSOgfnUtVv/EVb1U61UflC8Yvr8lTWIT8+boSOa4A2p+C4M3ScWlfnXfiXghxga6yZjHUxf05d5zdyWfEW8/9gjsB5gHLs1pGW0vAQvyowV2xZYrLY30R3bqqobzA3wvm9Nu9jx4hJrStNMS9VPUcvptA/3j/cfZ19fvj2OPNQqYA6npis6rid2u5rtokiJmn/Bo81K1NGQwAA","debug_symbols":"5dzdalNRFEXhd8l1kT3n2r99FRGJWiVQUrFRkOK7m2pOUjFUwWIZ7LumXU3Xai/GoRff3erd1ZvPH15vtu9vbleXL+9W1zdv17vNzXb/6m6VXowfn7z9uN7ev77drT/tVpdyrherq+27+w9r/Xaxer+5vlpdlvLt4rfhnPs4DOc82nFYpZ6ZrlXpMF2ryy/Try72Cymd38j5tFF7fKMR/TA7ej+OjnxmVGXZRuM0qtbOvW1JZXnfUvOD6bNLlOOvMKXTsNvhTM1xpuc4M+Y4M89xZpnjzDrHmW2OM/scZ44pzvQcT0Ge4ynIczwFeY6nIOc5zpzjKchzPAX535+ClGosw3J6/NDlzPT4e7a0/Orag38GtH5YuhOXHsClIxGXFnFpE5cO4tKZuHQhLl2JSxOLGMQiBrGImVjETCxiJhYxE4uYiUXMxCJmYhEzsYiZWMRMLGIhFrEQi1iIRSzEIhZiEQuxiIVYxEIsYiEWsRCLWIlFrMQiVmIRK7GIlVjESixiJRaxEotYiUWsxCI2YhEbsYiNWMRGLGIjFrERi9iIRWzEIjZiERuxiJ1YxE4sYicWsROL2IlF7MQidmIRO7GInVjETiziIBZxEIs4iEUcxCIOYhEHsYiDWMRBLOIgFnEQi6hETKISsYlKxCgqEauoRMyiErGL+5+I3JpYRiViGpWQbRSyjUK2Ucg2CtnGJ8CUnmNrZBuFbKOQbRSyjUK20cg2GtlGI9toZBufgNh5jq2RbTSyjUjPRkjQRkjRRkjSRkjTRkjURkjVRkjWRkjXRkjYRkjZRkjaRkjbRkjcRkjdRkjeRkjfRkjgRkjhRkjiRkjjRkjkRkjlRkjmRkjnRkjoRkjpRkjqRkjrRkjsRkjtRkjuRkjvRkjwRkjxRkjyRkjzRkj0Rkj1Rkj2Rkj3Rkj4Rkj5Rkj6Rkj7Rkj8Rkj9Rkj+Rkj/RkgAR0gBR0gCR0gDR0gER0gFR0gGR0gHR0gIR0gJR0gKR0gLR0gMR0gNR0gOR0gPR0gQR0gRR0gSR0gTR0gUR0gVR0gWR0gXx0gXx0gXx0gXx0gXx4nYRiNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdHCNdnEC6OIF0cQLp4gTSxYlEbGMgXZxAujiBdHEC6eIE0sUJpIsTSBcnkC5OIF2cQLo4gXRxAuniBNLFCaSLE0gXJ/7Cxen6w9b7f3Euw5Hj4c/4fbgMLfuUEaeFVOqZ6Ti+c075OGulZXv95+1712n7+oftSwsv0+3B3/78dO+jHKb7iF+nD9d6qmtjqmvzVNeWqa6tU13bprq2T3XtmOnaSJNcu3/1Zf1ps35zfXW7/577L37evt1tbraHl7uvH39+ZT/7HQ=="},{"name":"_set_authorized","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"approver","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"},{"name":"authorize","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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"},{"name":"is_reject_all","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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"},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/+2b0W7aMBSGHRq6tGlTSAiBQgt0baXdpazt6N1eZnvuXU/aOwwHH/HXdZDRjmcsEQnFie3zf/6PbdIqRGJzJOtPpMpddT4VHw9q812d6387nhhj1S45o0A4O4FwngTCGTNyRgZOeY5VWa47ueY+ic16/FCJnWWiT6Be7AqkqyaqkGh1bKNd1W+nIIDwQsHHqo7Okfqkqh4BUzXYph3cowF34B5pncA92slIK1HmOBj3S7LF5o29no1yLGcqFvGnUMa6KVgYOxxr181Yn53laO2jwxw1q5zy0FWxE7imnJyDPuO3yxPqU+xzbX7EUJ5AW2pHbTrAK49LsV1L5zv6xVq/DNqcQr9E60fXlHfpV1+V5bmbbNtSfEc+1jJ26ib2uxzFmocpjC0Dfb45ulxJjQvx/oi0a/xiyYDp0gnTZk26Ge8ml1cQm+8p6eVZxutpvl1ovmXQ5gq87DnyMgJtYqLrXos+nyevKxmvb+FJ38DU9+BJv0Wf0ZM3GS+38CQ3MOUePMlb9Pk8+fZVxissPCkMTIUHT4oWfT5Pls3zw8DCk4GBaeDBk0GLPuPaaeZJaeFJaWAqPXhStugzevJTxhtaeDI0MA09eDJs0Wf05IeMV1l4UhmYKg+eVC36jHts83wysvBkZGAaefBk1KLP6MlSxhtbeDI2MI09eDJu0WdcO43+tYUn1wamaw+eoOY+3INAuatAuYsD4db1GddOs8dOLDyZGJgmHjxBzX24ywPh1vUZc/ki400tPJkamKYePEHNfbjzQLmLQLmHgXKXgXJXgXIfyvzW9Rmfv5s99sbCkxsD040HT1BzH+48UO5JoNzFgXDr+oxrp/n/4K2FJ7cGplsPnqDmPtyjQLn7B8Kt6zPOwVcZb2bhyczANPPgCWruwz0OlLsKlHsSKHcRKPcwUO4yUO7juvy/3PmBcMt79L7PH+dMy7dUYyINoXEKjTOFcgacc4jRZeOsa8zVHPQWTnzZ5EqfP3S9cK6/XMnYnx2NTca+dxO7+ZvjQcWidxrvDb49gn7EnLcHLTZpPUAuqfwb2lI7akP7BfHL99nuVPlxR7+Z1i+DNnfQ717rR9eUd+nfL1V2Odds5npPbNf5F2BytFc+4/vLAjSExknHDJjmbpieHI63xncaheBdjwvNszPNswza4F7uc289ch+5bbjxOeQM7lH9HO51tPHgb0UWEOMv7Ab1lOo2AAA=","debug_symbols":"ndpRattAGIXRveg5FN/fmhkpWymlOIlTDMEJiVMoJnuv3ZIF5LxpJN237+kw5+lhf/f+6+fh+Pj8Nt1+P09Pz/e70+H5eDmdp823Wv69fXvZHa8v3k6719N0u+3jZtofHy5Poz5upsfD0366be3jx811s359s93AJrAp2GxhM8OmwabDZsAGOthCBzN0MEMHM3QwQwczdDBDBzN0MEMHM3QwQwcNOmjQQYMOGnTQoIMGHTTooEEHDTpo0EGHDjp00KGDDh106KBDBx066NBBhw46dDCggwEdDOhgQAcDOhjQwYAOBnQwoIMBHSzQwQIdLNDBAh0s0MECHSzQwQIdLNDBAh2s0MEKHazQwQodrNDBCh2s0MEKHazQwQodZLORUWRUMtrKaJZRk1GX0ZDRIiMpIlJEpIhIEZEiIkVEiogUESkiUkSkiJIiSoooKaKkiJIiSoooKaKkCMHGiDZGuDHijRFwjIhjhBwj5hhBx4g6Rtgx4o4ReIzIY4QeI/YYwceIPkb4MeKPEYCMCGSEICMGGUHIiEJGGDLikBGIjEhkhCIjFhnByIhGRjgy4pERkIyIZIQkIyYZQcmISkZYMuKSEZiMyGSEJiM2GcHJiE5GeDLikxGgjAhlhCgjRhlByohSRpgy4pQRqIxIZYQqI1YZwcqIVka4MuKVEbCMiGWELCNmWWKWJWZZYpYlZlliliVmWWKWJWZZYpYlZlliliVmWWKWJWZZYpYlZlliliVmWWKWJWZZYpYlZlliliVmWWKWJWZZYpYlZll0QVLMssQsS8yyxCxLzLLELEvMsr5qlpfD793rYXf3tL9ehb1+ez/ef96MvRxPf17+f7n8+xc="},{"name":"set_authorized_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"approver","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"},{"name":"authorize","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"7VvbTuMwEP2XPCPkuXv4ldVqVW4rJFQQl5VWiH/fFGonpaYRaZNmW55Q6JmeOWN3PDNuX6rLq/Pn379u5td3j9XZj5fq9u5i9nRzN6+fXiqQt/893s/mi8fHp9nDU3UWTqqr+WX99/Wkur65varORF5P1mCoZEskqngGmxXAZBaXYIosm8EuQZZgF+UMBpMiWpdgCKEBo73+PKlAD16hjaWQMSQwo9p4CuMWCskDpWVxahSC8Nt7+3DvjaH03gTIyQgibGYAipB2FZBjw7EI6TrcyXIgndE2w3e4Rgg70OqU3AEOATq0shFleHTugJNxyJE0hZXVKqxt8JBdB+34ZAAmMEMc75OBeNRR31M+Qpp+1B1y1CPGtczE01dgcaMCmbyCSN5kbqaOnQ8Scw4BDQxrivXoFNuhKdZgGa8QdE1xPDrFvl/FHuJmuEnKQ2btHQoFrOT9LCIr2FophaNRCoek1FMloNiFpbpYaKqXlRZwERb8DkspLHSsYflKrUvatJp1Hv0YQ/6O4XS7NJLv1ZluN0d6SKujklcH187lPdTTjtAo5RWlC4/Gr3cFNXskNVPXQC029at79NEGajR+YVyHIzahkY5WQGuf014L2NUIIHpMex4pAH5sBDgcmd5PiuQ8uCFq7YmiXjdNG8gttlsrmtD9BOPIQvd1kDBtLzRCFhpXBiL0xsA7YMh1ZJFBdsAg2ARppTukYoZVba4sNMrWHyz9/yXY+BIsWnPOua3Naei0eCApp6SirfQM4X1QLqfl+1fNZNFao926N1xaWS+r2MvK+1iV7/Y6raCXFfayKqYjD2lbeLt8h+L1Zq6U6vuEJtk5JAYenEEGZ9DBGexrDEur2MuquJddLJ+e3KEGLWemWFJTnmLulAG2ZWivCK4wFPKk5/J+JRHnkJandvtzh8Z0BzlhUam0Vjwpb2RS3uikvLFJeRMn5Y1PyRsOo3rTkY0ZJuXNTpNxkYEGZ+DBGWRwBh2coZyvPj8ee5ylHEfg8K05uhKGhOEpYHgKHJ6Chqfg4SlkeArdnqIjk4sNTOGfNPb1JWAaDnJrkhiSVbmx77SCXlbYy4q+bMV0CkUraK7mAVpfF14OcNhOobijldIOiu1ReL1mP+unP7OHm9n57dXiNwaLF5/nF+knB/Xj09/791dq7D8="},{"name":"is_consumable","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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"},{"name":"unconstrained_is_consumable","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"on_behalf_of","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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xUmki5NIFyeRLk4iXZxEujiJdHES6eIk0sVJpIuTSBfHSBfHSBfHSBfHSBfHhdhGI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI10cI12chnRxGtLFaUgXpyFdnFaIbWxIF6chXZyGdHHaQRfHpdQDU9tepr6t1v3PWDk8Y7fizLE7HOuPbmP36O564HQbu1Uz9mdLWzmbLZYfy9A3Z+/uZW7zXurQbsGxci8HbZ+t3ku83MvqvejlXlbvpb7cy+q95Mu9rN6Lf6J76XV3L3rovbSXe1m9l/4/38uYY38v88CmrnMZ494dKsoy/UBPP8nTq6CnD/T0Qk9fIdO7rU2f6OkNnf72q7/OPlyc/fHu/Pr2X3z55sfL1zcXV5d3X978/f7rd27P/gM="},{"name":"consume","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/+2dW2/byBXHSUfKTYmSTXSxZNmWfMnm4qwl2bGdu+PcnNtukgLtQ4EC3ljZ5qHxwpst2gL9DH0sCvSlQJ/6cfpcoJ+hzwWK7pA81t9nR1oSnkPpACQQiKRnzv83Z2YOZyYayvfCI/fDPz86z8M9flCazeizfbSj49BWW5LTV8I5oYTzmENOHzhzBJvDG1AI46BjloLlor/hPXNsw0Ut+nywv7/z++aHj7u93zX3vv/U3Hvf/Hrv+4+732HG47kEGQ8k/3E8/DzJEHOu/LXRvnEcBHgfNy7wo78dfEb/Cl7fRZTf3CN3+nCP7E7APYorx6J7J374d9qDPCf7DOb4DO75IHtSwi/tdtcwRO4/OHx2jf46CZ8nZJg6guVtG7unoDyumH2oV/LZceazIqQ5BX87LeRH3zvcp3JwjZpJuHNjwi3dRgoytrvnojKQjwtQHl6+s+ADR/rB8+1MZCsPemdB9xyU3eUYwNgqQp36wHIO9C+I+H7lnfH1ee/wMSzWXQCmz0SYwlgnU96wHV8E2+7GSTdWjL0S89t55rcipLkIviwJ+dIHbWKi69IAfXc+WV819soxfFK2MJVH4JPyAH13Pll7b+xVYvikYmGqjMAnlQH6DttJ19irxvBJ1cJUHYFPqgP0HbaTQH8yhk8mLUyTI/DJ5AB9hz5ZN/ZqMXxSszDVRuCT2gB9hz65YezVY/ikbmGqj8An9QH67nzSDcZVUzF8MmVhmhqBT6YG6DuMscH4pBHDJw0LU2MEPmkM0HfYd94Ze9MxfDJtYZoegU9QMwl3WSl3SSl3fUy4ub67vrMSxNiZGD6ZsTDNjMAnqJmEuz4m3FzfYRzsGXuzMXwya2GaHYFPUDMJd1kpd0kpd10pd1UpdyPjTpV7XOIJ13c4bwjm3M0YPmlamJoj8AlqNhNw18aEm+s7fM4H67GtGD5pWZhaI/BJa4C+w7WCYOwzF8MncxamuRH4BDWTcNeVcl9Uyl1Syl1Wyl1Ryl1Vyj2plLumlFtr/J5Syt1Qyq01fmt9Xmpt3+MST7j+hDP9tV1jbz6GT+YtTPMj8Mn8AH2H8/ng/4sXYvhkwcK0MAKfoGYS7iml3CWl3HWl3Fk7SZe7qpS7opQ7iydH4+b6Dscna8beYgyfLFqYFkfgE9RMwl1Ryl1Wyj2nlLs+Jtxc3+H3ZgL9SzF8csnCdGkEPkHNJNytMeHOef09Npu+NNPKboExkYbHOD3GWYDzC+C7z8FG3hlnu4119TnoXRbxS9va7un6srj+yjtj+6pQ2YztazK2g+/ZLUW28pHtaxa/XQd933G9LTHbpLUEdUnnd/1+WkpHaSheEL/ZY3clOkd+nu8Sy1eENFcg3zWWj66p3o3/ViAGSLW1OG3d+IL6+V2vz3RBhKndMfHljHf4GBaXMAYVhZjMXkuan+z89jdffftub7f3s097+zvf9N72dnZ90D3DmPHTH1CuCbiHe3pPWf6Oh2Q9GHvUBqg/015X0sxBmmdRYc5bONEW5TsDZTDHWSj7ZSg3pcM9yzTWofrG9jIBaYssj+/9eB8rpZXfx9rePUrblnreSe5jNfausLKdYWUrQhqcf10RKu+wsRhqJuGujQk313e4BrBj7F2N4ZOrFiap8cwwn6BmEu7amHBzfYd1uWIbg9h8cs3CJDR+HOoT1EzCXRoTbq7vsC5v4rh3mE+WLExLI/AJaibhnlHKPamUu66Uu6qUu5FxH4kb18/+7osz9ZKunxFHAc5xfI/rCq7Xz0jvOuh9IeOXjq390PUX8vq7xnZbqGzGdkfGdjBX6ka2aL7dsfhtBfRdr591mW3S6kJd0vnfYP2M0lEaihfEb+b2y9E58vN8SyxfEdIsQ74Oy0fXVO/Gf3+GGCDV1uK0dVw/o/hk1hxovaG/ntT7uNvbxxCCSx7DjtNef9nlwNzDX+98+PhsF/MWj2Lv57397z7sfcS812PaE6yCVQyn3gAeDMPYlaSWzgTLG4SJZVY23uSKkAZfS7csVF4ftImJrlEzCXdRKfd1pdz5MeGW6zvdnuDQYJVeD0k+bjNfY/mEXr/ZxdfWeqDhMZ/TgbHhugxTR7C8bfwvH8+hH21DjDzzWdE7PEwhPwoND62vqaVr1EzCnRsTbkH9g9e25i2aHmPD4Td/vSoOV+m/jig9/tfRmkg5wlegrnqHj2F9ew2YbogwhX1bprzhOGedlW2Vla0IaXD77bpQeX3QJia6Rs0k3CWl3GWl3BWl3FWl3JNKuWtKuetKuaeUcjeUcmuN31qfl1r75bRSbq3+nlHKncWTdLm1tu+qUm6tz/lsfJIu96xSbq3znaZS7pZSbq3PnWx9MF3ubH0wXe6qUu5sfTBd7mx9MF3ubPydLrfW56XW9q01nswp5Z5Xyq21fWfrg+lyZ+0kXe6qUu6KUu4snqTLvaCUW2v71jpv0Doe1NovF5Vyt8aE29yj7yP/e0KaKXxdHDKRhsc4PcZZgPM18N0G2HC93ZX0NkDvpohfwrri7Yeub4rrh6+Luy1UNmP7jozt4Pvd9Dox2u56x+K3e6DvO663u8w2ad2FuqTzf03001I6SkPxgvjNnoFb0Tny83zrLF8R0tyCfHdYPrqmejf++yfEAKm2Fqetm32j1M/xdXEbIkzhnqeud/gYFpcwJqzIMHUEy2vdF9FlZcMYiHu8JJ9XG4yJroc9Z4dxL48Jt6D+wd6krkXTY2xUj3m4j3uT1qAMvmd/rZ3McyLcm3TTO3wM64O3gemWCFPYB4Wei21bTL7JylaENPjdA6HnadCWbzMmukbNJNwlpdxlpdwVpdxVpdyTSrlrSrnrSrmnlHI3lHJrjd9an5da++W0Um6t/p5Ryp3Fk3S5tbZvrePYRsadKrfWeDKrlFvrfKeplLullFvrcydbH0yXO1sfTJc7Wx9MlztbH0yXe0opd0MpdzafT5dba/vWGk/mlHLPK+XW2r6z9cF0ubN2ki631nmD1nlaFk/S5V5Qyq21fWudN2gdD2rtl4tKuVtjwm3u0feR/3dMmincm4RMpOExTo9xFuD8NvgO94W43ptEerg34p6IX8K64u2Hru+J64d7kzaFymZsP5CxHXy/eyuyRXuTHlj89hD0fcf1tsVsk9YW1CWd//dYPy2lozQUL4jf7Bm4H50jP893h+UrQpr7kO8By0fXm9Gn8d9/IAZItbU4bd3sTaJ+jv3vtghTu2PiC/6+DGl4jJMOjEFrQkyGh8b5/Z8e/LS3v/NN721v5+D3An3vx78/iJ/+gHJNwD3cv3LK8nc8JOvB2KM2QP2Z9tiQZg7SnIgq5byFE21RPtxjZY6zUPZ7UG5Kh3vD/OhvVN/YXiYg7RrLc9I7XD+u4w/fT7TB+Iw+xgGH9RXsJ0IfkwYe2G/uA5NUGxIsbxvrjsp2j5WtCGlwnXVTqLw+aBMTXaPmZgLuGaXcVaXcWttJaUy4uf6EM/21DdvYyeaTBxYmoXHvUJ+gZhLuslLuilLua2PCzfXd9Z31HZwfDfPJloVpawQ+Qc0k3DWl3M0x4cZ1qF/lxJmCdShkIg2PcXqMswDnOJbF+bnrdSjSewh6j2T80rG1H7p+JK8frEM9ESqbsf1UxnYwL9iObNG89anFb89A3/U8cJvZJq1tqEs6/2Wun5bSURqKF8Rv5siPo3Pk5/m2WL4ipHkM+Z6yfHRN9W789wZigFRbi9PWzbrCffADMT2UYQrekYNrMaThMU46MCZIrUMJlrdtq4MNVjaMgUUor+Tziq+x8jXdpNy5MeEW1D94R86GRdOzsJkjD/fxHTn3IZ0P6fEdOTLPifAdOY+8w8ewPvgEmB6LMIV9UOi52LbF5EesbEVIg3tghJ6nQVt+wpjoGjWTcJeUcpeVcleUcleVck8q5a4p5a4r5Z5Syt1Qyq01fmt9Xmrtl9NKubX6e0YpdxZP0uXW2r61jmO1Puez8Um63LNKubXOd5pKuVtKubU+d7L1wXS5s/XBdLmz9cF0ubP1wXS5s/XBdLmz+Xy63Frbt9Z4MqeUe14pt9b2na0PpsudtZN0ubXOG7TO07J4ki73glJure1b67xB63hQa79cVMrdGhNuc4++j/zHvDRT+I4cZCINj3F6jLMA50/Ad9tgw/XeJNLbBr1nIn4J64q3H7p+Jq4fviPnhVDZjO2XMraD73e/imzR3qSXFr99Cfq+43p7xWyT1iuoSzr/Q76fltJRGooXxG/2DDyPzpGf53vK8hUhzXPI95Llo2uqd4P2LcQAqbYWp62bvUnUz/EdOdsiTOHeJIw7pOExTjowJgi9j6MjWF7rvogcKxvGQNyLJfm82mZMdD3sOTuMe3lMuAX1D/Ym5SyaHmMjf+ThPu5Neghl8CE97k16LlKOcG9SkrHBc2CSei7LlTfsgy9Y2Z6wshUhDX73QOpZ7YM2MdE1aibhLinlLivlrijlrirlnlTKXVPKXVfKPaWUu6GUW2v81vq81Novp5Vya/X3jFLuLJ6ky621fWsdx2p9zmfjk3S5Z5Vya53vNJVyt5Rya33uZOuD6XJn64Ppcmfrg+lyZ+uD6XJn64Ppcmfz+XS5tbZvrfFkTin3vFJure07Wx9MlztrJ+lya503aJ2nZfEkXe4Fpdxa27fWeYPW8aDWfrmolLs1JtzmHn0f+a/HpZnCvUnIRBoe4/QYZwHOn4PvcM+L671JpPcS9F6J+CWsK95+6PqVuH64N+krobIZ269lbAff734T2aK9Sa8tfnsL+r7jenvDbJPWG6hLOv/L8X5aSkdpKF4Qv9kz8GV0jvw83wuWrwhpcE/Ta5aPrqnejf/+BDFAqq3FaetmbxL1c9ybJLTHLfj97mXv8DEsLmFMEPptI/E9fbwOllnZMAbib1dJPq9+av/caa8/NuS/af6L/Q+feh47JuB8G8CX4Zyno/u+5R45YRvubx7RATtfv19b3dldLUCByX4B2Ohv5gfW/w8daTsDIEMBAA==","debug_symbols":""}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"AuthRegistry::consume_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AuthRegistry::consume_parameters","fields":[{"name":"on_behalf_of","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"inner_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AuthRegistry::is_reject_all_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AuthRegistry::is_reject_all_parameters","fields":[{"name":"on_behalf_of","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"AuthRegistry::_set_authorized_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AuthRegistry::_set_authorized_parameters","fields":[{"name":"approver","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"message_hash","type":{"kind":"field"}},{"name":"authorize","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"AuthRegistry::is_consumable_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AuthRegistry::is_consumable_parameters","fields":[{"name":"on_behalf_of","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"message_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"AuthRegistry::set_reject_all_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AuthRegistry::set_reject_all_parameters","fields":[{"name":"reject","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"AuthRegistry::set_authorized_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AuthRegistry::set_authorized_private_parameters","fields":[{"name":"approver","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"message_hash","type":{"kind":"field"}},{"name":"authorize","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"AuthRegistry::set_authorized_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AuthRegistry::set_authorized_parameters","fields":[{"name":"message_hash","type":{"kind":"field"}},{"name":"authorize","type":{"kind":"boolean"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"reject_all","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"approved_actions","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}}]}]}},"file_map":{"27":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constraint the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::from_slice(domain_generators.as_slice());\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    crate::assert_constant(starting_index);\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = crate::field::bn254::decompose_hint(scalar);\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n","path":"std/hash/mod.nr"},"55":{"source":"contract AuthRegistry {\n    use dep::aztec::{state_vars::{PublicMutable, Map}, protocol_types::address::AztecAddress};\n    use dep::authwit::auth::{IS_VALID_SELECTOR, compute_authwit_message_hash, assert_current_call_valid_authwit};\n\n    #[aztec(storage)]\n    struct Storage {\n      reject_all: Map<AztecAddress, PublicMutable<bool>>,\n      // on_behalf_of => authwit hash => authorized\n      approved_actions: Map<AztecAddress, Map<Field, PublicMutable<bool>>>,\n    }\n\n    /**\n     * Updates the `authorized` value for `msg_sender` for `message_hash`.\n     *\n     * @param message_hash The message hash being authorized\n     * @param authorize True if the caller is authorized to perform the message hash, false otherwise\n     */\n    #[aztec(public)]\n    fn set_authorized(message_hash: Field, authorize: bool) {\n        storage.approved_actions.at(context.msg_sender()).at(message_hash).write(authorize);\n    }\n\n    /**\n     * Updates the `reject_all` value for `msg_sender`.\n     * \n     * When `reject_all` is `true` any `consume` on `msg_sender` will revert.\n     * \n     * @param reject True if all actions should be rejected, false otherwise\n     */\n    #[aztec(public)]\n    fn set_reject_all(reject: bool) {\n        storage.reject_all.at(context.msg_sender()).write(reject);\n    }\n\n    /**\n     * Consumes an `inner_hash` on behalf of `on_behalf_of` if the caller is authorized to do so.\n     * \n     * Will revert even if the caller is authorized if `reject_all` is set to true for `on_behalf_of`.\n     * This is to support \"mass-revoke\".\n     *\n     * @param on_behalf_of The address on whose behalf the action is being consumed\n     * @param inner_hash The inner_hash of the authwit\n     * @return `IS_VALID_SELECTOR` if the action was consumed, revert otherwise\n     */\n    #[aztec(public)]\n    fn consume(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n        assert_eq(false, storage.reject_all.at(on_behalf_of).read(), \"rejecting all\");\n\n        let message_hash = compute_authwit_message_hash(\n            context.msg_sender(),\n            context.chain_id(),\n            context.version(),\n            inner_hash\n        );\n\n        let authorized = storage.approved_actions.at(on_behalf_of).at(message_hash).read();\n\n        assert_eq(true, authorized, \"unauthorized\");\n        storage.approved_actions.at(on_behalf_of).at(message_hash).write(false);\n\n        IS_VALID_SELECTOR\n    }\n\n    /**\n     * Updates a public authwit using a private authwit\n     * \n     * Useful for the case where you want someone else to insert a public authwit for you.\n     * For example, if Alice wants Bob to insert an authwit in public, such that they can execute\n     * a trade, Alice can create a private authwit, and Bob can call this function with it.\n     *\n     * @param approver The address of the approver (Alice in the example)\n     * @param message_hash The message hash to authorize\n     * @param authorize True if the message hash should be authorized, false otherwise\n     */\n    #[aztec(private)]\n    fn set_authorized_private(approver: AztecAddress, message_hash: Field, authorize: bool) {\n        assert_current_call_valid_authwit(&mut context, approver);\n        AuthRegistry::at(context.this_address())._set_authorized(approver, message_hash, authorize).enqueue(&mut context);\n    }\n\n    /**\n     * Internal function to update the `authorized` value for `approver` for `messageHash`.\n     * Used along with `set_authorized_private` to update the public authwit.\n     * \n     * @param approver The address of the approver\n     * @param message_hash The message hash being authorized\n     * @param authorize True if the caller is authorized to perform the message hash, false otherwise\n     */\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _set_authorized(approver: AztecAddress, message_hash: Field, authorize: bool) {\n        storage.approved_actions.at(approver).at(message_hash).write(authorize);\n    }\n\n    /**\n     * Fetches the `reject_all` value for `on_behalf_of`.\n     * \n     * @param on_behalf_of The address to check\n     * @return True if all actions are rejected, false otherwise\n     */\n    #[aztec(public)]\n    #[aztec(view)]\n    fn is_reject_all(on_behalf_of: AztecAddress) -> bool {\n        storage.reject_all.at(on_behalf_of).read()\n    }\n\n    /**\n     * Fetches the `authorized` value for `on_behalf_of` for `message_hash`.\n     * \n     * @param on_behalf_of The address on whose behalf the action is being consumed\n     * @param message_hash The message hash to check\n     * @return True if the caller is authorized to perform the action, false otherwise\n     */\n    #[aztec(public)]\n    #[aztec(view)]\n    fn is_consumable(on_behalf_of: AztecAddress, message_hash: Field) -> bool {\n        storage.approved_actions.at(on_behalf_of).at(message_hash).read()\n    }\n\n    unconstrained fn unconstrained_is_consumable(on_behalf_of: AztecAddress, message_hash: Field) -> pub bool {\n        storage.approved_actions.at(on_behalf_of).at(message_hash).read()\n    }\n}\n","path":"/home/g/Documents/Code/aztec-tutorials/aztec-txe/contracts/auth_registry_contract/src/main.nr"},"64":{"source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER, GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    CANONICAL_AUTH_REGISTRY_ADDRESS\n},\n    hash::pedersen_hash\n};\nuse dep::aztec::{prelude::Deserialize, context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties \n * (e.g. protocols or other users) to execute an action on their behalf.\n * \n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be \n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few \n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can \n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be \n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n * \n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer. \n * \n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is \n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n * \n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline \n * how this would look in private, and then in public later. \n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX). \n * `Alice` would make a `deposit` transaction, that she is executing using her account contract. \n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token` \n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to \n * convince the `Token` contract that it is allowed to do so. \n * \n * This is where the authentication witness comes in! The `Token` contract computes a `message_hash` from the \n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to \n * execute that call.\n * \n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her \n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n * \n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n * \n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts. \n * \n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *  \n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store \n * the messages that we have approved. \n * \n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `keccak256(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a colission and we return \n *      a success flag.\n * \n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be \n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the \n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n * \n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains. \n */\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n/** \n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n * \n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the \n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n * \n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/** \n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n * \n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n * \n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize  \n */\npub fn assert_inner_hash_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context.static_call_private_function(\n        on_behalf_of,\n        FunctionSelector::from_signature(\"verify_private_authwit(Field)\"),\n        [inner_hash]\n    ).unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier, 0);\n}\n\n/** \n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n * \n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the \n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n * \n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n * \n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash(\n        [(*context).msg_sender().to_field(), (*context).selector().to_field(), (*context).get_args_hash()]\n    );\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/** \n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n * \n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the \n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n * \n * @param on_behalf_of The address that have authorized the the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    let result: Field = context.call_public_function(\n        AztecAddress::from_field(CANONICAL_AUTH_REGISTRY_ADDRESS),\n        FunctionSelector::from_signature(\"consume((Field),Field)\"),\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default()\n    ).deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness \n * \n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n * \n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n * \n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n * \n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    pedersen_hash(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/** \n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n * \n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n * \n * @param on_behalf_of The address that have authorized the the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    pedersen_hash(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n * \n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(consumer: AztecAddress, chain_id: Field, version: Field, inner_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n * \n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n * \n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context.call_public_function(\n        AztecAddress::from_field(CANONICAL_AUTH_REGISTRY_ADDRESS),\n        FunctionSelector::from_signature(\"set_authorized(Field,bool)\"),\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n * \n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise \n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context.call_public_function(\n        AztecAddress::from_field(CANONICAL_AUTH_REGISTRY_ADDRESS),\n        FunctionSelector::from_signature(\"set_reject_all(bool)\"),\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/authwit/src/auth.nr"},"77":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"78":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"94":{"source":"use dep::protocol_types::{hash::pedersen_hash, storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"101":{"source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle<let N: u32>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/returns.nr"},"106":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"107":{"source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<let N: u32>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"112":{"source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"113":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"115":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"151":{"source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr"},"153":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    public_context::FunctionReturns, inputs::{PrivateContextInputs, PublicContextInputs}\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\ntrait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"154":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{enqueue_public_function_call_internal, set_public_teardown_function_call_internal}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, gas::Gas,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, public_call_stack_item::PublicCallStackItem,\n    public_call_stack_item_compressed::PublicCallStackItemCompressed, read_request::ReadRequest,\n    note_hash::NoteHash, nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        let call_request = PublicCallRequest { item, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            item,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"155":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{\n    execution::{get_chain_id, get_version, get_contract_address, get_block_number},\n    storage::{raw_storage_read, storage_read}\n};\n\nstruct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"156":{"source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<let N: u32>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N as Field)\n}\n\nunconstrained fn storage_write<let N: u32>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<let N: u32>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<let N: u32>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"175":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"177":{"source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"210":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"291":{"source":"struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/g/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"}}}